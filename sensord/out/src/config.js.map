{"version":3,"sources":["src/config.js"],"names":[],"mappings":"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","file":"out/src/config.js","sourceRoot":"../..","sourcesContent":["\"use strict\";\n\nvar assert = require('chai').assert;\nvar events = require('events');\nvar mqtt = require ('mqtt');\nvar winston = require('winston');\nvar fs = require('fs');\nvar tty = require('tty');\nvar util = require('util');\nvar split = require('split');\nvar yargs = require('yargs');\nvar winston_syslog = require('winston-syslog');\nvar os = require('os');\nvar _ = require('lodash');\n\nvar U = require ('./u');\nvar gatewayModule = require('./gateway');\n\nvar logging = require('./logging');\nvar logger = new logging.Logger(__filename);\n\nvar configError = function (msg:string) {\n  console.error(\"config error: \" + msg);\n  process.exit(10);\n};\n\nexport class Config {\n  mqttClient:mqtt.Client;\n  gateways:Array<gatewayModule.Gateway> = [];\n\n  constructor() {\n  }\n\n  doLoad(configJson:any) {\n    var self = this;\n\n    //--------------------------------------------------------------------------\n    //      load mqtt settings\n    //--------------------------------------------------------------------------\n    logger.debug(util.format(\"loading mqtt settings\"));\n\n    if (!configJson['mqtt'])\n      configError(\"missing mqtt section\");\n\n    var mqttOptions = configJson['mqtt']['options'];\n    if (!mqttOptions)\n      configError(\"missing mqtt options section\");\n\n    this.mqttClient = mqtt.connect(mqttOptions);\n\n    //--------------------------------------------------------------------------\n    //      load gateway list\n    //--------------------------------------------------------------------------\n    logger.debug(util.format(\"loading gateways\"));\n\n    this.gateways = [];\n\n    if (!configJson['gateways'])\n      configError(\"missing gateways section\");\n    _.forEach(configJson['gateways'], (v, k) => {\n      logger.debug(util.format(\"loading gateway: %s\", k));\n\n      var gatewayType:string = v['type'];\n\n      if (gatewayType === \"ArduinoSerialGateway\") {\n\n        var devices:Array<gatewayModule.ArduinoDevice> = [];\n        _.forEach(v['devices'], (deviceConfig,deviceId) => {\n          var deviceInitString:string = deviceConfig['initString'];\n          if (U.isNullOrUndefined(deviceInitString))\n            deviceInitString = \"\";\n          var device:gatewayModule.ArduinoDevice = new gatewayModule.ArduinoDevice(deviceId, deviceInitString);\n          devices.push(device);\n        });\n\n        var initString = v['initString'];\n        if (U.isNullOrUndefined(initString))\n          configError(util.format(\"missing or invalid initString format. gateway %s\", k));\n\n        var serialPort = v['serialPort'];\n        if (U.isNullOrUndefined(serialPort) || serialPort.toString().length === 0)\n          configError(util.format(\"missing or invalid serialPort. gateway %s\", k));\n\n        var remoteSSH = v['remoteSSH'];\n\n        var gateway = new gatewayModule.ArduinoSerialGateway(self.mqttClient, \"\", k, devices, serialPort, initString, remoteSSH);\n\n        self.gateways.push(gateway);\n\n      } else {\n        configError(util.format(\"unknown or missing gateway type for gateway %s\", k));\n      }\n    });\n  }\n\n  loadj(configJson:any) {\n    var self = this;\n\n    self.doLoad(configJson);\n  }\n\n\n  loads(str:string) {\n\n    var configJson = JSON.parse(str);\n    return this.loadj(configJson);\n  }\n\n  loadf(file:string) {\n    return this.loads(fs.readFileSync(file, 'utf8'));\n  }\n}\n"]}