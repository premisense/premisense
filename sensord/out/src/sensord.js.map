{"version":3,"sources":["src/sensord.js"],"names":[],"mappings":"AAAA;AAAA,AAAI,EAAA,CAAA,MAAK,EAAI,CAAA,OAAM,AAAC,CAAC,MAAK,CAAC,OAAO,CAAC;AACnC,MAAM,AAAC,CAAC,6BAA4B,CAAC,CAAC;AAEtC,KAAK,KAAK,EAAI,UAAU,MAAK,CAAG,CAAA,IAAG,CAAG;AAClC,KAAI,IAAG,IAAM,CAAA,eAAc,KAAK,IAAI,CAAG;AACnC,SAAO,OAAK,CAAC;EACjB;AAAA,AAEA,KAAI,IAAG,IAAM,CAAA,eAAc,KAAK,KAAK,CAAG;AACpC,SAAK,YAAY,AAAC,CAAC,MAAK,CAAC,CAAC;AAC1B,SAAO,OAAK,CAAC;EACjB;AAAA,AAEA,KAAI,eAAc,KAAK,CAAE,IAAG,KAAK,CAAC,IAAM,KAAG,CAAG;AAG1C,SAAK,MAAM,AAAC,CAAC,eAAc,OAAO,AAAC,CAAC,MAAK,CAAC,CAAG,CAAA,IAAG,KAAK,CAAC,CAAC;EAC3D,KAAO,KAAI,IAAG,WAAa,CAAA,eAAc,YAAY,CAAG;AACpD,SAAK,KAAK,AAAC,CAAC,MAAK,CAAG,CAAA,IAAG,KAAK,CAAC,CAAC;AAC9B,OAAI,IAAG,KAAK,IAAM,MAAI,CAAG;AACrB,UAAS,GAAA,CAAA,CAAA,EAAI,EAAA,CAAG,CAAA,CAAA,EAAI,CAAA,MAAK,OAAO,CAAG,CAAA,CAAA,EAAE,CAAG;AACpC,aAAK,KAAK,AAAC,CAAC,MAAK,CAAE,CAAA,CAAC,CAAG,CAAA,IAAG,cAAc,CAAE,CAAA,CAAC,CAAC,CAAC;MACjD;AAAA,IACJ,KAAO;AACH,UAAM,IAAI,MAAI,AAAC,EAAC,0BAA0B,EAAC,KAAG,EAAG,CAAC;IACtD;AAAA,EACJ,KAAO;AACH,SAAK,WAAW,AAAC,CAAC,MAAK,CAAG,KAAG,CAAC,CAAC;EACnC;AAAA,AAIA,OAAO,OAAK,CAAC;AACjB,CAAC;AAED,KAAK,cAAc,EAAI,UAAS,AAAQ,CAAG;AAlC/B,MAAS,GAAA,SAAoB,GAAC;AAAG,WAAoB,EAAA,CAChD,OAAoB,CAAA,SAAQ,OAAO,CAAG,OAAkB;AAC3D,eAAmC,EAAI,CAAA,SAAQ,MAAmB,CAAC;AAAA,AAiC7E,MAAS,GAAA,CAAA,CAAA,EAAI,EAAA,CAAG,CAAA,CAAA,EAAI,CAAA,MAAK,OAAO,CAAG,CAAA,CAAA,GAAK,EAAA,CAAG;AACvC,OAAI,MAAK,CAAE,CAAA,EAAI,EAAA,CAAC,IAAM,KAAG,CAAG;AACxB,WAAK,KAAK,AAAC,CAAC,MAAK,CAAE,CAAA,CAAC,CAAG,CAAA,MAAK,CAAE,CAAA,EAAI,EAAA,CAAC,CAAC,CAAC;IACzC;AAAA,EACJ;AAAA,AACJ,CAAC;AAED,KAAK,WAAW,EAAI,CAAA,MAAK,KAAK,CAAC;AAE/B,MAAM,AAAC,CAAC,OAAM,CAAC,CAAC;AAOhB","file":"out/src/sensord.js","sourceRoot":"../..","sourcesContent":["var assert = require('chai').assert;\nrequire('traceur/bin/traceur-runtime');\n\nassert.type = function (actual, type) {\n    if (type === $traceurRuntime.type.any) {\n        return actual;\n    }\n\n    if (type === $traceurRuntime.type.void) {\n        assert.isUndefined(actual);\n        return actual;\n    }\n\n    if ($traceurRuntime.type[type.name] === type) {\n        // chai.assert treats Number as number :'(\n        // Use runtime to handle symbol\n        assert.equal($traceurRuntime.typeof(actual), type.name);\n    } else if (type instanceof $traceurRuntime.GenericType) {\n        assert.type(actual, type.type);\n        if (type.type === Array) {\n            for (var i = 0; i < actual.length; i++) {\n                assert.type(actual[i], type.argumentTypes[0]);\n            }\n        } else {\n            throw new Error(`Unsupported generic type${type}`);\n        }\n    } else {\n        assert.instanceOf(actual, type);\n    }\n\n    // TODO(arv): Handle more generics, structural types and more.\n\n    return actual;\n};\n\nassert.argumentTypes = function(...params) {\n    for (var i = 0; i < params.length; i += 2) {\n        if (params[i + 1] !== null) {\n            assert.type(params[i], params[i + 1]);\n        }\n    }\n};\n\nassert.returnType = assert.type;\n\nrequire(\"./app\");\n\n//import {Test} from './test.js';\n//\n//var t = new Test (\"10\", \"12\");\n//t.test();\n//\n"]}